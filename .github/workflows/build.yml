name: Build, Push, and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build
    runs-on: arc-runner-set

    steps:
      - uses: docker/login-action@v1
        with:
          registry: harbor.korporate.org
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          with:
          token: ${{ secrets.ARGO_TOKEN }}

      - uses: sonarsource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - uses: actions/checkout@v2
      - name: Set env
        run: echo "GITHUB_BRANCH=$(echo $GITHUB_REF_NAME-$GITHUB_SHA)" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker buildx create --use
          docker buildx inspect default --bootstrap
          docker buildx build --file Dockerfile -t harbor.korporate.org/myapp/my-app-image:$GITHUB_REF_NAME-$GITHUB_SHA --load .

      - name: Push Docker image to Harbor
        run: |
          docker push harbor.korporate.org/myapp/my-app-image:$GITHUB_REF_NAME-$GITHUB_SHA

      #- name: Install yq
      # run: |
      #    sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
      #    sudo chmod a+x /usr/local/bin/yq

      - name: Update manifest file
        run: |
          # Assuming you have a manifest file named k8s.yaml
          git config --global user.name "${{secrets.USERNAME_GITHUB}}"
          git config --global user.email "${{secrets.EMAIL_GITHUB}}"
          yq eval '.spec.template.spec.containers[0].image = "harbor.korporate.org/my-app-image:${{ env.GITHUB_BRANCH }}"' -i deployments/deployment.yml

          git pull
          git add .

          git commit -m "updating newer image"
          git push --set-upstream origin master
